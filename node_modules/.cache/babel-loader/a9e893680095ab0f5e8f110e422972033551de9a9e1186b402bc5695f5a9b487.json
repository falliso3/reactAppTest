{"ast":null,"code":"import React,{useState,useRef}from\"react\";import\"./FraudCSVAnalyzer.css\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export default function FraudCsvAnalyzer(){//Define all state variables to be used in the page, including\n//rows, flagged items, user-defined parameters, and the CSV\n//file to be entered by the user.\n//CSV file\nconst[rawCsv,setRawCsv]=useState(\"\");//Parsed rows\nconst[rows,setRows]=useState([]);//CSV headers\nconst[headers,setHeaders]=useState([]);//List of flagged transactions/values\nconst[flagged,setFlagged]=useState([]);//User-defined threshold\nconst[threshold,setThreshold]=useState(1000);//Number of duplicates before considered suspicious\nconst[duplicateTolerance,setDuplicateTolerance]=useState(2);//Summary at the bottom of the page\nconst[summary,setSummary]=useState(null);//Reference to the file\nconst fileInputRef=useRef(null);//Parses the CSV file, preparing it for reading/handling afterwards.\n//We use regular expressions to achieve this\nfunction parseCSV(text){const lines=text.split(/\\r?\\n/).filter(r=>r.trim()!==\"\");if(lines.length===0)return{headers:[],data:[]};//The first line contains headers, so we map remaining lines to\n//objects named after the headers\nconst headers=lines[0].split(\",\");const data=lines.slice(1).map(line=>{const vals=line.split(\",\");const obj={};headers.forEach((h,i)=>obj[h]=vals[i]);return obj;});return{headers,data};}//Read the file for fraudulent entries\nfunction handleFile(e){var _e$target$files;//Receive uploaded file\nconst file=(_e$target$files=e.target.files)===null||_e$target$files===void 0?void 0:_e$target$files[0];if(!file)return;const reader=new FileReader();reader.onload=()=>{//When the file is loaded, we read and analyze it\nconst text=reader.result;setRawCsv(text);const{headers,data}=parseCSV(text);setHeaders(headers);setRows(data);//Run the fraud detection on the file\nrunHeuristics(headers,data);};reader.readAsText(file);}//Helper function to guess the key CSV columns\nfunction guessKey(headers,candidates){//Make everything lowercase for easy readability\nconst lower=headers.map(h=>h.toLowerCase());//Iterate through\nfor(const c of candidates){const idx=lower.findIndex(h=>h.includes(c));if(idx>=0)return headers[idx];}//Return null if no match was found\nreturn null;}//Test the data for fraudulent entries\nfunction runHeuristics(headers,data){//These are automatically detected as key columns\nconst amountKey=guessKey(headers,[\"amount\",\"amt\",\"transaction_amount\"]);const dateKey=guessKey(headers,[\"date\",\"transaction_date\"]);const descKey=guessKey(headers,[\"description\",\"memo\",\"details\"]);//Set to keep track of unique flagged row indeces\nconst flaggedIndices=new Set();//For each numeric entry, convert to a float for comparison\ndata.forEach((r,i)=>{const amt=parseFloat((r[amountKey]||\"\").replace(/[^0-9.-]/g,\"\"));if(!isNaN(amt)&&Math.abs(amt)>=threshold)flaggedIndices.add(i);//Items with \"bad words\" are immediately flagged for fraud\nconst desc=(r[descKey]||\"\").toLowerCase();const badWords=[\"fraud\",\"dispute\",\"chargeback\",\"unknown\"];if(badWords.some(w=>desc.includes(w)))flaggedIndices.add(i);});//Update state with flagged transactions and a summary\nconst flaggedList=Array.from(flaggedIndices).map(i=>({index:i,row:data[i]}));setFlagged(flaggedList);setSummary({total:data.length,flagged:flaggedList.length,amountKey,dateKey,descKey});}function downloadFlagged(){if(!flagged.length)return;//Create the header line, add the flagged data\nconst hdr=headers.join(\",\")+\"\\n\";const lines=flagged.map(f=>headers.map(h=>f.row[h]||\"\").join(\",\")).join(\"\\n\");//Create a blob and have the user download it\nconst blob=new Blob([hdr+lines],{type:\"text/csv\"});const url=URL.createObjectURL(blob);const a=document.createElement(\"a\");a.href=url;a.download=\"flagged_transactions.csv\";a.click();URL.revokeObjectURL(url);}//Clear data\nfunction clear(){setRawCsv(\"\");setRows([]);setHeaders([]);setFlagged([]);setSummary(null);if(fileInputRef.current)fileInputRef.current.value=null;}return/*#__PURE__*/_jsxs(\"div\",{className:\"fraud-analyzer-container\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"fraud-analyzer-title\",children:\"CSV Financial Fraud Detector\"}),/*#__PURE__*/_jsx(\"p\",{className:\"fraud-analyzer-subtitle\",children:\"Upload a CSV and run client-side heuristics to flag suspicious transactions.\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"file-input-group\",children:[/*#__PURE__*/_jsx(\"input\",{ref:fileInputRef,type:\"file\",accept:\".csv,text/csv\",onChange:handleFile}),/*#__PURE__*/_jsx(\"button\",{className:\"button-secondary ml-2\",onClick:clear,children:\"Clear\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"summary-inputs\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"summary-box\",children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"Amount threshold: $\",threshold]}),/*#__PURE__*/_jsx(\"input\",{type:\"range\",min:\"0\",max:\"50000\",value:threshold,onChange:e=>setThreshold(Number(e.target.value))})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"summary-box\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Duplicate tolerance\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",min:\"2\",max:\"10\",value:duplicateTolerance,onChange:e=>setDuplicateTolerance(Number(e.target.value))})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"summary-box\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"button-primary\",onClick:()=>runHeuristics(headers,rows),children:\"Analyze\"}),/*#__PURE__*/_jsx(\"button\",{className:\"button-success ml-2\",onClick:downloadFlagged,children:\"Download flagged\"})]})]}),summary&&/*#__PURE__*/_jsxs(\"div\",{className:\"summary-box\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[\"Total transactions: \",/*#__PURE__*/_jsx(\"strong\",{children:summary.total})]}),/*#__PURE__*/_jsxs(\"div\",{children:[\"Flagged: \",/*#__PURE__*/_jsx(\"strong\",{children:summary.flagged})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"summary-note\",children:[\"Amount column: \",summary.amountKey||\"none\",\", Description: \",summary.descKey||\"none\"]})]}),/*#__PURE__*/_jsxs(\"table\",{className:\"fraud-analyzer-table\",children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"#\"}),headers.map(h=>/*#__PURE__*/_jsx(\"th\",{children:h},h)),/*#__PURE__*/_jsx(\"th\",{children:\"Flagged\"})]})}),/*#__PURE__*/_jsxs(\"tbody\",{children:[rows.map((r,i)=>{const isFlag=flagged.some(f=>f.index===i);return/*#__PURE__*/_jsxs(\"tr\",{className:isFlag?\"flagged-row\":\"\",children:[/*#__PURE__*/_jsx(\"td\",{children:i+1}),headers.map(h=>/*#__PURE__*/_jsx(\"td\",{children:r[h]},h)),/*#__PURE__*/_jsx(\"td\",{className:isFlag?\"flagged-cell\":\"\",children:isFlag?\"Yes\":\"â€”\"})]},i);}),rows.length===0&&/*#__PURE__*/_jsx(\"tr\",{children:/*#__PURE__*/_jsx(\"td\",{colSpan:headers.length+2,children:\"No data loaded\"})})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"notes-section\"})]});}","map":{"version":3,"names":["React","useState","useRef","jsx","_jsx","jsxs","_jsxs","FraudCsvAnalyzer","rawCsv","setRawCsv","rows","setRows","headers","setHeaders","flagged","setFlagged","threshold","setThreshold","duplicateTolerance","setDuplicateTolerance","summary","setSummary","fileInputRef","parseCSV","text","lines","split","filter","r","trim","length","data","slice","map","line","vals","obj","forEach","h","i","handleFile","e","_e$target$files","file","target","files","reader","FileReader","onload","result","runHeuristics","readAsText","guessKey","candidates","lower","toLowerCase","c","idx","findIndex","includes","amountKey","dateKey","descKey","flaggedIndices","Set","amt","parseFloat","replace","isNaN","Math","abs","add","desc","badWords","some","w","flaggedList","Array","from","index","row","total","downloadFlagged","hdr","join","f","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","href","download","click","revokeObjectURL","clear","current","value","className","children","ref","accept","onChange","onClick","min","max","Number","isFlag","colSpan"],"sources":["/home/felix/ASU/PornVol7/CSE485/Capstone/reactAppTest/src/FraudCSVAnalyzer.jsx"],"sourcesContent":["import React, { useState, useRef } from \"react\";\nimport \"./FraudCSVAnalyzer.css\";\n\nexport default function FraudCsvAnalyzer() {\n  //Define all state variables to be used in the page, including\n  //rows, flagged items, user-defined parameters, and the CSV\n  //file to be entered by the user.\n\n  //CSV file\n  const [rawCsv, setRawCsv] = useState(\"\");\n  //Parsed rows\n  const [rows, setRows] = useState([]);\n  //CSV headers\n  const [headers, setHeaders] = useState([]);\n  //List of flagged transactions/values\n  const [flagged, setFlagged] = useState([]);\n  //User-defined threshold\n  const [threshold, setThreshold] = useState(1000);\n  //Number of duplicates before considered suspicious\n  const [duplicateTolerance, setDuplicateTolerance] = useState(2);\n  //Summary at the bottom of the page\n  const [summary, setSummary] = useState(null);\n  //Reference to the file\n  const fileInputRef = useRef(null);\n\n  //Parses the CSV file, preparing it for reading/handling afterwards.\n  //We use regular expressions to achieve this\n  function parseCSV(text) {\n    const lines = text.split(/\\r?\\n/).filter((r) => r.trim() !== \"\");\n    if (lines.length === 0) return { headers: [], data: [] };\n\n    //The first line contains headers, so we map remaining lines to\n    //objects named after the headers\n    const headers = lines[0].split(\",\");\n    const data = lines.slice(1).map((line) => {\n      const vals = line.split(\",\");\n      const obj = {};\n      headers.forEach((h, i) => (obj[h] = vals[i]));\n      return obj;\n    });\n    return { headers, data };\n  }\n\n  //Read the file for fraudulent entries\n  function handleFile(e) {\n    //Receive uploaded file\n    const file = e.target.files?.[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = () => {\n      //When the file is loaded, we read and analyze it\n      const text = reader.result;\n      setRawCsv(text);\n      const { headers, data } = parseCSV(text);\n      setHeaders(headers);\n      setRows(data);\n\n      //Run the fraud detection on the file\n      runHeuristics(headers, data);\n    };\n    reader.readAsText(file);\n  }\n\n  //Helper function to guess the key CSV columns\n  function guessKey(headers, candidates) {\n    //Make everything lowercase for easy readability\n    const lower = headers.map((h) => h.toLowerCase());\n    //Iterate through\n    for (const c of candidates) {\n      const idx = lower.findIndex((h) => h.includes(c));\n      if (idx >= 0) return headers[idx];\n    }\n    //Return null if no match was found\n    return null;\n  }\n\n  //Test the data for fraudulent entries\n  function runHeuristics(headers, data) {\n    //These are automatically detected as key columns\n    const amountKey = guessKey(headers, [\"amount\", \"amt\", \"transaction_amount\"]);\n    const dateKey = guessKey(headers, [\"date\", \"transaction_date\"]);\n    const descKey = guessKey(headers, [\"description\", \"memo\", \"details\"]);\n\n    //Set to keep track of unique flagged row indeces\n    const flaggedIndices = new Set();\n    //For each numeric entry, convert to a float for comparison\n    data.forEach((r, i) => {\n      const amt = parseFloat((r[amountKey] || \"\").replace(/[^0-9.-]/g, \"\"));\n      if (!isNaN(amt) && Math.abs(amt) >= threshold) flaggedIndices.add(i);\n\n      //Items with \"bad words\" are immediately flagged for fraud\n      const desc = (r[descKey] || \"\").toLowerCase();\n      const badWords = [\"fraud\", \"dispute\", \"chargeback\", \"unknown\"];\n      if (badWords.some((w) => desc.includes(w))) flaggedIndices.add(i);\n    });\n\n    //Update state with flagged transactions and a summary\n    const flaggedList = Array.from(flaggedIndices).map((i) => ({ index: i, row: data[i] }));\n    setFlagged(flaggedList);\n    setSummary({ total: data.length, flagged: flaggedList.length, amountKey, dateKey, descKey });\n  }\n\n  function downloadFlagged() {\n    if (!flagged.length) return;\n\n    //Create the header line, add the flagged data\n    const hdr = headers.join(\",\") + \"\\n\";\n    const lines = flagged.map((f) => headers.map((h) => f.row[h] || \"\").join(\",\")).join(\"\\n\");\n\n    //Create a blob and have the user download it\n    const blob = new Blob([hdr + lines], { type: \"text/csv\" });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"flagged_transactions.csv\";\n    a.click();\n    URL.revokeObjectURL(url);\n  }\n\n  //Clear data\n  function clear() {\n    setRawCsv(\"\");\n    setRows([]);\n    setHeaders([]);\n    setFlagged([]);\n    setSummary(null);\n    if (fileInputRef.current) fileInputRef.current.value = null;\n  }\n\n  return (\n    <div className=\"fraud-analyzer-container\">\n      <h2 className=\"fraud-analyzer-title\">CSV Financial Fraud Detector</h2>\n      <p className=\"fraud-analyzer-subtitle\">\n        Upload a CSV and run client-side heuristics to flag suspicious transactions.\n      </p>\n\n      <div className=\"file-input-group\">\n        <input ref={fileInputRef} type=\"file\" accept=\".csv,text/csv\" onChange={handleFile} />\n        <button className=\"button-secondary ml-2\" onClick={clear}>\n          Clear\n        </button>\n      </div>\n\n      <div className=\"summary-inputs\">\n        <div className=\"summary-box\">\n          <label>Amount threshold: ${threshold}</label>\n          <input\n            type=\"range\"\n            min=\"0\"\n            max=\"50000\"\n            value={threshold}\n            onChange={(e) => setThreshold(Number(e.target.value))}\n          />\n        </div>\n\n        <div className=\"summary-box\">\n          <label>Duplicate tolerance</label>\n          <input\n            type=\"number\"\n            min=\"2\"\n            max=\"10\"\n            value={duplicateTolerance}\n            onChange={(e) => setDuplicateTolerance(Number(e.target.value))}\n          />\n        </div>\n\n        <div className=\"summary-box\">\n          <button className=\"button-primary\" onClick={() => runHeuristics(headers, rows)}>\n            Analyze\n          </button>\n          <button className=\"button-success ml-2\" onClick={downloadFlagged}>\n            Download flagged\n          </button>\n        </div>\n      </div>\n\n      {summary && (\n        <div className=\"summary-box\">\n          <div>Total transactions: <strong>{summary.total}</strong></div>\n          <div>Flagged: <strong>{summary.flagged}</strong></div>\n          <div className=\"summary-note\">\n            Amount column: {summary.amountKey || \"none\"}, Description: {summary.descKey || \"none\"}\n          </div>\n        </div>\n      )}\n\n      <table className=\"fraud-analyzer-table\">\n        <thead>\n          <tr>\n            <th>#</th>\n            {headers.map((h) => <th key={h}>{h}</th>)}\n            <th>Flagged</th>\n          </tr>\n        </thead>\n        <tbody>\n          {rows.map((r, i) => {\n            const isFlag = flagged.some((f) => f.index === i);\n            return (\n              <tr key={i} className={isFlag ? \"flagged-row\" : \"\"}>\n                <td>{i + 1}</td>\n                {headers.map((h) => <td key={h}>{r[h]}</td>)}\n                <td className={isFlag ? \"flagged-cell\" : \"\"}>{isFlag ? \"Yes\" : \"â€”\"}</td>\n              </tr>\n            );\n          })}\n          {rows.length === 0 && <tr><td colSpan={headers.length + 2}>No data loaded</td></tr>}\n        </tbody>\n      </table>\n\n      <div className=\"notes-section\"></div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}